// Types created by the user
.number_type nodes
// Declared Facts
.decl node(n:nodes)
.input node
.decl num_nodes(n:nodes)
.input num_nodes
.decl edge(n:nodes, m:nodes, wt:number)
.input edge
.decl path(n:nodes, m:nodes)
.decl wcc(n:nodes, m:nodes)
.decl wcc_g(n:nodes, m:nodes)
// The Facts that will outputted at the end of the query
.output wcc_g(IO=stdout)
// create all of the paths
path(X, Z) :- edge(X, Z, _), node(X), node(Z).
path(X, Z) :- path(X, Y), edge(Y, Z, _), node(X), node(Y),
node(Z).
// find all weakly connected components
wcc(nd, nd) :- node(nd).
wcc(nd1, nd2) :- path(nd1, nd2), nd1 < nd2.
wcc(nd1, nd2) :- path(nd2, nd1), nd1 < nd2.
wcc(nd1, nd3) :- wcc(nd1, nd2), wcc(nd2, nd3).
wcc(nd1, nd3) :- wcc(nd1, nd2), wcc(nd3, nd2).
// using the weakly connected components find the subgraphs
wcc_g(nd2, nd) :- wcc(_, nd2), nd = min nd1 : wcc(nd1, nd2).


// Types created by the user
.number_type nodes
// Declared Facts
.decl node(n:nodes)
.input node
.decl num_nodes(n:nodes)
.input num_nodes
.decl edgecc(n:nodes, m:nodes)
.input edgecc
.decl path(n:nodes, m:nodes)
.decl wcc(n:nodes, m:nodes)
.decl wcc_g(n:nodes, m:nodes)
// The Facts that will outputted at the end of the query
.output wcc_g(IO=stdout)
// create all of the paths
path(X, Z) :- edgecc(X, Z), node(X), node(Z).
path(X, Z) :- path(X, Y), edgecc(Y, Z), node(X), node(Y),
node(Z).
// find all weakly connected components
wcc(nd, nd) :- node(nd).
wcc(nd1, nd2) :- path(nd1, nd2), nd1 < nd2.
wcc(nd1, nd2) :- path(nd2, nd1), nd1 < nd2.
wcc(nd1, nd3) :- wcc(nd1, nd2), wcc(nd2, nd3).
wcc(nd1, nd3) :- wcc(nd1, nd2), wcc(nd3, nd2).
// using the weakly connected components find the subgraphs
wcc_g(nd2, nd) :- wcc(_, nd2), nd = min nd1 : wcc(nd1, nd2).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Types created by the user
.number_type nodes
// Declared Facts
.decl node(n:nodes)
.input node
.decl num_nodes(n:nodes)
.input num_nodes
.decl wikiedgesp(n:nodes, m:nodes, wt:number)
.input wikiedgesp
.decl path(n:nodes, m:nodes)
.decl wcc(n:nodes, m:nodes)
.decl wcc_g(n:nodes, m:nodes)
// The Facts that will outputted at the end of the query
.output wcc_g(IO=stdout)
// create all of the paths
path(X, Z) :- wikiedgesp(X, Z, _), node(X), node(Z).
path(X, Z) :- path(X, Y), wikiedgesp(Y, Z, _), node(X), node(Y),
node(Z).
// find all weakly connected components
wcc(nd, nd) :- node(nd).
wcc(nd1, nd2) :- path(nd1, nd2), nd1 < nd2.
wcc(nd1, nd2) :- path(nd2, nd1), nd1 < nd2.
wcc(nd1, nd3) :- wcc(nd1, nd2), wcc(nd2, nd3).
wcc(nd1, nd3) :- wcc(nd1, nd2), wcc(nd3, nd2).
// using the weakly connected components find the subgraphs
wcc_g(nd2, nd) :- wcc(_, nd2), nd = min nd1 : wcc(nd1, nd2).


